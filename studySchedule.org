#+TITLE: 学习计划
#+AUTHOR: dlut.xing@gmail.com

* 学习的内容
** 研究优秀开源项目
** 设计模式
** 熟悉数据库

* 开源项目学习
** 怎样找到适合自己的项目
我觉得是这样的，你在自己的项目中要用到什么开源项目，挑选到合适的就去学
习它，包括从文档、例子、单元测试、源码等。然后fork，按需要进行修改、优
化。更好的是和该项目有交流，例如submit issue、pull request等。


** github中怎么参与项目
+ 找到感兴趣的项目
+ 读代码
+ 发现可以改进的地方
+ fork
+ 修改代码，添加测试
+ pull request
+ 作者merge你的commit
+ 继续读代码


** 参与项目注意事项
贡献代码无外乎三种目的：
+ 加feature
+ 修bug
+ 重构
加feature之前要寻找相关文档，一般会有文档说明design goal & concept，什
么样的feature才能接受，如果不确定，总是先提交issue或者直接联系原作者讨
论。Bug的来源，自己发现的，别人提交的issue，但总是要先提交issue并告知你
已经着手在做，避免没必要的重复劳动，同理，你也应该先确认有没有人已经在
做。重构是在不变更功能的情况下，改变代码架构，一般diff的足迹都较大，一
定要注意沟通。

最重要的是，一定要先看看commit log、pull request list和issue list，如果
项目管理者万年没更新、不merge、不回应，就绝对不要去浪费这个时间。

对于新手对自己能力没把握就先自己做吧，git版本控制流程、协作流程都不熟，
merge conflict都没解决过就不要给人添乱了。寻找那种有插件、扩展机制的项
目，先尝试贡献插件，上手难度低，易出成果。


** 在github上搭建blog
http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html


** 好的文章
借助开源项目，学习软件开发

https://github.com/zhuangbiaowei/learn-with-open-source
* 好的c开源项目
** Lua
Lua的源代码，百分之一百的ANSI C，一点都不掺杂。在任何支持ANSI C编译器的
平台上都可以轻松编译通过。我试过，真是一点废话都没有。Lua的代码数量足够
小，5.1.4仅仅1.5W行，去掉空白行和注释估计能到1W行。

下载地址：http://www.lua.org/

** SQLite
SQLite是一个开源的嵌入式关系数据库，实现自包容、零配置、支持事务的SQL数
据库引擎。 其特点是高度便携、使用方便、结构紧凑、高效、可靠。足够小，大
致3万行C代码，250K。 

下载地址：http://www.sqlite.org/

** Nginx
 
Nginx("engine x") 是一个高性能的 HTTP 和反向代理服务器，也是一个
IMAP/POP3/SMTP 代理服务器 。Nginx 是由 Igor Sysoev 为俄罗斯访问量第二的
Rambler.ru站点开发的，它已经在该站点运行超过四年多了。Igor 将源代码以类
BSD许可证的形式发布。自Nginx 发布四年来，Nginx 已经因为它的稳定性、丰富
的功能集、 示例配置文件和低系统资源的消耗而闻名了。

nginx的优秀除了体现在程序结构以及代码风格上，nginx的源码组织也同样简洁
明了，目录结构层次结构清晰，值得我们去学习。

下载地址：http://nginx.org/en/download.html




* 怎样阅读源代码
第零步 ―― 准备好你本次的阅读目的

一个项目，特别是上万行的代码，你是不可能一次读完的。带着目的读代码，而
不是翻代码。如果你是要修改一个功能，这样明确的目的就非常好。如果不是，
也请列一个提纲，比如今天读懂代码组织方式，明天读懂架构，后天读懂功能A
等等。你可以用剥洋葱的方式一层层往里读，也可以直接切一刀。但是请不要翻
代码，这样永远都读不懂。

第一步 ―― 把代码运行起来

读代码之前请一定要让代码能运行起来，读 usage，读 API 文档，把握代码的主
要功能和功能入口。如果你连程序是干嘛的都不知道，怎么读代码？

第二步 ―― 找入口点

根据上一步你了解到的功能，选一个最简单的（比如 xpdf 有 GUI，有
pdftopng, pdftohtml, pdftotext，显然难度是下降的）程序，或者 API。找到
它的源码位置，从它开始读。而像 tornado 的文档直接就有 API 到代码的链接，
就简直太完美了！不过，像 tornado 这样的异步架构，你可能找不到它的主循环，
这时候找一个主事件处理 callback 就可以。

第三步 ―― 观察数据流

好，假设你在第二步选好了要读的 main 函数或者主循环。不要着急读代码，首
先看看 argv 在 main 函数中是怎么解析的，传递给了谁，谁输出了结果。主函
数是怎么拿到请求的，谁处理了请求，最后输出的是哪个变量。

第四步 ―― 只看函数，不看逻辑

跟着数据流，看它经过的函数，不要看逻辑，只看函数。猜，它是干嘛的。如果
猜不出，跳到函数定义，看函数头注释，看接受的参数。但是记住只跳一层，不
要看代码逻辑。如果你是在剥洋葱，找个小本本记下每个函数的功能，明天请从
最主要的那个函数开始看。如果你有着明确的目的，猜哪个函数和你需求相关的，
进入那个函数继续看。GOTO 3

因为很重要，再说一次，在认识所有的函数之前，不要读代码逻辑！除非：一、
你已经找到你需要修改的地方；二、它是这个程序的最主要的功能算法。而这样
的代码，整个程序往往只会有一处。
